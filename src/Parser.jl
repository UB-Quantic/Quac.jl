using CSV
using DataFrames

export parse_qflex_circuit

function parse_single_qubit_gate(gate_string, target_qubit)
    gate_parts = split(gate_string, "_")
    gate_type = gate_parts[1]

    if gate_type == "hz"
        return Hz(target_qubit; θ=0.25, ϕ=0.5)  # Assuming constant parameters for Hz gate
    elseif gate_type == "sd"
        return Sd(target_qubit)
    elseif gate_type == "x"
        return X(target_qubit)
    elseif gate_type == "y"
        return Y(target_qubit)
    else
        error("Unknown gate type: $gate_type")
    end
end

function parse_single_qubit_gate_with_param(gate_string, target_qubit)
    gate_parts = split(gate_string, "(")
    gate_type = gate_parts[1]
    param = parse(Float64, replace(gate_parts[2], ")" => ""))

    if gate_type == "rz"
        return Rz(target_qubit; θ=param)
    else
        error("Unknown gate type: $gate_type")
    end
end

function parse_two_qubit_gate(gate_string, target_qubit1, target_qubit2)
    gate_parts = split(gate_string, "(")
    gate_type = gate_parts[1]
    params_parts = split(replace(gate_parts[2], ")" => ""), ",")
    param1 = parse(Float64, params_parts[1])
    param2 = parse(Float64, params_parts[2])

    if gate_type == "fsim"
        return FSim(target_qubit1, target_qubit2; θ=param1, ϕ=param2)
    else
        error("Unknown gate type: $gate_type")
    end
end

function parse_qflex_circuit(file_name; sites=nothing)
    data = CSV.read(file_name, DataFrame, delim=" ", header=false)
    n_qubits = data[!, 1][1]  # First line indicates the number of qubits
    circ = Circuit(n_qubits)

    if sites === nothing
        sites = Set([i for i in 1:n_qubits])
    end
    # sites = Set([5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,61,62,63,64,65,66,72,73,74,75,83,84,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,15,16,24,25,26,27,33,34,35,36,37,38,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,66,67,73,74,75,76,84,85,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,6,16,15,25,17,27,24,34,26,36,28,38,33,43,35,45,37,47,39,49,42,52,44,54,46,56,48,58,51,61,53,63,55,65,57,67,62,72,64,74,66,76,73,83,75,85,84,94,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,15,14,24,16,26,25,35,27,37,32,42,34,44,36,46,38,48,41,51,43,53,45,55,47,57,52,62,54,64,56,66,63,73,65,75,74,84,5,6,14,15,16,17,24,25,26,27,28,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,72,73,74,75,76,83,84,85,94])
    mapping = Dict(splat(Pair).(reverse.(enumerate(sort(collect(sites))))))

    for i in 2:nrow(data)
        gate_string = data[!, 2][i]
        if !ismissing(gate_string)
            if count(c -> c == '_', gate_string) > 0
                gate = parse_single_qubit_gate(gate_string, mapping[parse(Int, data[!, 3][i])])
            elseif count(c -> c == '(', gate_string) > 0
                if count(c -> c == ',', gate_string) > 0
                    gate = parse_two_qubit_gate(gate_string*data[!, 3][i], mapping[data[!, 4][i]], mapping[data[!, 5][i]])
                else
                    gate = parse_single_qubit_gate_with_param(gate_string, mapping[parse(Int, data[!, 3][i])])
                end
            else
                error("Unknown gate format: $gate_string")
            end
            push!(circ, gate)
        end
    end

    return circ
end